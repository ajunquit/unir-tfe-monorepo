name: ci-default

on:
  push:
    branches: [ "master" ] 

permissions:
  contents: read
  packages: read

env:
  DOTNET_VERSION: '8.x'
  AZURE_WEBAPP_NAME: 'webapp-tfe-unir-monorepo'  # <-- tu App Service real

jobs:
  build_test_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---- Cache NuGet + snapshot previo (para estimar cache hit %) ----
      - name: Cache NuGet
        id: nuget_cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: Snapshot NuGet packages (pre-restore)
        run: |
          mkdir -p .cache-metrics
          find ~/.nuget/packages -maxdepth 2 -mindepth 2 -type d 2>/dev/null \
            | sed 's#.*/packages/##' \
            | tr '[:upper:]' '[:lower:]' \
            | sort > .cache-metrics/pre.txt || true

      # ---- Restore, Build, Test con cobertura ----
      - name: Restore
        run: |
          dotnet restore \
            --source "https://api.nuget.org/v3/index.json" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

      # ---- Cobertura: genera Markdown + HTML y lo agrega al Job Summary ----
      - name: Generate coverage summary
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '**/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'MarkdownSummary;HtmlInline_AzurePipelines'

      - name: Add coverage to Job Summary
        run: |
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          cat coveragereport/Summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport

      # ---- Estimar Cache hit % real (paquetes requeridos vs ya presentes) ----
      - name: Compute NuGet cache hit %
        id: cache_metrics
        run: |
          SOLUTION=$(ls *.sln | head -n 1)
          dotnet list "$SOLUTION" package --include-transitive --format json > .cache-metrics/list.json

          # Paquetes requeridos (id/version) únicos
          jq -r '
            [.projects[].frameworks[]
              | (.topLevelPackages + .transitivePackages // [])
              | .[] | "\(.id | ascii_downcase)/\(.resolvedVersion | ascii_downcase)"
            ] | unique | .[]' .cache-metrics/list.json > .cache-metrics/required.txt

          # Presentes antes del restore (desde el cache action)
          comm -12 .cache-metrics/pre.txt .cache-metrics/required.txt > .cache-metrics/hit.txt || true

          total=$(wc -l < .cache-metrics/required.txt | tr -d ' ')
          hits=$(wc -l < .cache-metrics/hit.txt | tr -d ' ')
          pct=0
          if [ "$total" -gt 0 ]; then
            pct=$(awk -v h="$hits" -v t="$total" 'BEGIN{printf("%.0f", (h*100.0)/t)}')
          fi

          echo "total=$total" >> $GITHUB_OUTPUT
          echo "hits=$hits" >> $GITHUB_OUTPUT
          echo "pct=$pct" >> $GITHUB_OUTPUT

          {
            echo "## Cache NuGet"
            echo ""
            echo "- Acción cache: **${{ steps.nuget_cache.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}**"
            echo "- Paquetes requeridos: **$total**"
            echo "- Presentes desde caché (pre-restore): **$hits**"
            echo "- **Cache hit estimado:** $pct%"
          } >> $GITHUB_STEP_SUMMARY

      # TIP: si tu .sln está en la raíz, especifica el proyecto web para evitar publicar otros.
      # ej: dotnet publish src/UNIR.TFE.Monorepo.WebApp -c Release -o ${{ github.workspace }}/publish
      - name: Publish
        run: dotnet publish -c Release -o ${{ github.workspace }}/publish

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: net-app
          path: ${{ github.workspace }}/publish
          if-no-files-found: error

  deploy_azure:
    needs: build_test_publish
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: net-app
          path: ./deploy   # bajamos el folder publicado aquí

      - name: Azure Login (Service Principal secret)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Despliegue a Azure App Service (Linux) usando folder (la acción zipea internamente)
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ./deploy
          # slot-name: "staging"  # <-- descomenta si quieres desplegar al slot
